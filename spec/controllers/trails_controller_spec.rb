require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TrailsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Trail. As you add validations to Trail, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:name => "name", :nature => "nature", :difficulty => "difficulty", :latitude => 38.989055, :longitude => -104.898360, :comment => "", :note => ""}
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TrailsController. Be sure to keep this updated too.
  let(:valid_session) { {:map_features => "trails_only"} }
  let(:weather_session) {{:map_features => "weather_details"}}

  describe "GET #index" do
    it "assigns all trails as @trails" do
      trail = Trail.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:trails)).to eq([trail])
    end
    
    ##################################################################
    #Added by Brad
    it "'index' gets the weather information" do
      trail = Trail.create! valid_attributes
      get :index, {}, valid_session
      expect(:trailweather).to have_content
      expect(:now).to have_content
      expect(:data).to have_content
      expect(:weekimage).to have_content #web address "iconlink"
      expect(:weektemp).to have_content
      expect(:weekweather).to have_content
    end
    ###################################################################
    # Done by Aaron
    it "tests getting weather details" do
      trail = Trail.create! valid_attributes
      get :index, {:map_features => "weather_details"}, valid_session
      expect(assigns(:map_features)).to eq(1)
      expect(assigns(:weather_count)).to eq(1)
      expect(assigns(:weather_circles_count)).to eq(0)
    end
    it "test getting circles" do
      trail = Trail.create! valid_attributes
      get :index, {:map_features => "weather_details_plusoverlay"}, valid_session
      expect(assigns(:map_features)).to eq(2)
      expect(assigns(:weather_count)).to eq(1)
      
    end
    it "test with a search entry" do
      trail = Trail.create! valid_attributes
      get :index, {:map_features => "trails_only", :search => "just a search"}, valid_session
      expect(assigns(:map_features)).to eq(0)
      expect(assigns(:trails_search_data)).not_to eq(nil)
    end
    #
  end

  describe "GET #show" do
    it "assigns the requested trail as @trail" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param}, valid_session
      expect(assigns(:trail)).to eq(trail)
    end
    
    ##################################################################
    #Added by Brad
    it "'show' gets the weather information" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param}, valid_session
      expect(:trailweather).to have_content
      expect(:now).to have_content
      expect(:data).to have_content
      expect(:weekimage).to have_content #web address "iconlink"
      expect(:weektemp).to have_content
      expect(:weekweather).to have_content
    end
    
    it "builds the gmaps for rails markers" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param}, valid_session
      expect(:markers).to have_content
    end
    
    it "updates the weather code by getting the inclimate weather info" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param}, valid_session
      expect(:weather_code).to have_content
    end
    ###################################################################
    # Done by Aaron --------------------------------------------------
    it "can delete comments" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param, :debug => "delete_comments"}, valid_session
      expect(assigns(:all_comments).count).to eq(0)
    end
    it "can add a comment" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param, :comment => "just a comment"}, valid_session
      expect(assigns(:all_comments).count).to eq(2)
    end
    it "ignores empty comments" do
      trail = Trail.create! valid_attributes
      get :show, {:id => trail.to_param, :comment => ""}, valid_session
      expect(assigns(:all_comments).count).to eq(0)
    end
    # ---------------------------------------------------------------
  end

  describe "GET #new" do
    it "assigns a new trail as @trail" do
      get :new, {}, valid_session
      expect(assigns(:trail)).to be_a_new(Trail)
    end
  end

  describe "GET #edit" do
    it "assigns the requested trail as @trail" do
      trail = Trail.create! valid_attributes
      get :edit, {:id => trail.to_param}, valid_session
      expect(assigns(:trail)).to eq(trail)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Trail" do
        expect {
          post :create, {:trail => valid_attributes}, valid_session
        }.to change(Trail, :count).by(1)
      end

      it "assigns a newly created trail as @trail" do
        post :create, {:trail => valid_attributes}, valid_session
        expect(assigns(:trail)).to be_a(Trail)
        expect(assigns(:trail)).to be_persisted
      end

      it "redirects to the created trail" do
        post :create, {:trail => valid_attributes}, valid_session
        expect(response).to redirect_to(Trail.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved trail as @trail" do
        post :create, {:trail => invalid_attributes}, valid_session
        expect(assigns(:trail)).to be_a_new(Trail)
      end

      it "re-renders the 'new' template" do
        post :create, {:trail => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        #skip("Add a hash of attributes valid for your model")
        {:name => "name1", :nature => "nature1", :difficulty => "difficulty1", :latitude => 40.989055, :longitude => -106.898360}
      }

      it "updates the requested trail" do
        trail = Trail.create! valid_attributes
        put :update, {:id => trail.to_param, :trail => new_attributes}, valid_session
        trail.reload
        #skip("Add assertions for updated state")
      end

      it "assigns the requested trail as @trail" do
        trail = Trail.create! valid_attributes
        put :update, {:id => trail.to_param, :trail => valid_attributes}, valid_session
        expect(assigns(:trail)).to eq(trail)
      end

      it "redirects to the trail" do
        trail = Trail.create! valid_attributes
        put :update, {:id => trail.to_param, :trail => valid_attributes}, valid_session
        expect(response).to redirect_to(trail)
      end
    end

    context "with invalid params" do
      it "assigns the trail as @trail" do
        trail = Trail.create! valid_attributes
        put :update, {:id => trail.to_param, :trail => invalid_attributes}, valid_session
        expect(assigns(:trail)).to eq(trail)
      end

      it "re-renders the 'edit' template" do
        trail = Trail.create! valid_attributes
        put :update, {:id => trail.to_param, :trail => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested trail" do
      trail = Trail.create! valid_attributes
      expect {
        delete :destroy, {:id => trail.to_param}, valid_session
      }.to change(Trail, :count).by(-1)
    end

    it "redirects to the trails list" do
      trail = Trail.create! valid_attributes
      delete :destroy, {:id => trail.to_param}, valid_session
      expect(response).to redirect_to(trails_url)
    end
  end
#############################################################################
#Implemented by Aaron
  describe 'TrailsController' do
    it 'get features has proper return value for trails only'do
      features = controller.get_map_features("trails_only")
      expect(features).to eq(0)
    end
    it 'get features has proper return value for weather only'do
      features = controller.get_map_features("weather_details")
      expect(features).to eq(1)
    end
    it 'get features has proper return value for weather and overlay'do
      features = controller.get_map_features("weather_details_plusoverlay")
      expect(features).to eq(2)
    end
    it 'get_weather should return a hash'do
      weather = controller.get_weather(38.989055, -104.898360)
      expect(weather).to be_a_kind_of Hash
    end
    it 'get_weather should reject bad lat/lon' do
      weather = controller.get_weather(0.00, 0.00)
      expect(weather).to eq("GPS location out of bounds")
    end
    it 'get_inclimate should return -1 for non strings'do
      inclimate = controller.get_inclimate(2.0)
      expect(inclimate).to eq(-1)
    end
    it 'get_inclimate should return good result for well formed strings'do
      inclimate = controller.get_inclimate("snow")
      expect(inclimate).to eq(0)
    end
    it 'get_inclimate works for all other main cases'do
      inclimate = controller.get_inclimate("rain")
      expect(inclimate).to eq(1)
      inclimate = controller.get_inclimate("thunder")
      expect(inclimate).to eq(1)
      inclimate = controller.get_inclimate("lightning")
      expect(inclimate).to eq(1)
      inclimate = controller.get_inclimate("fog")
      expect(inclimate).to eq(2)
    end
    it 'get_inclimate should ignore case'do
      inclimate = controller.get_inclimate("SnOw")
      expect(inclimate).to eq(0)
    end
  end
###############################################################################
end
